#Include "tlpp-core.th"
#Include "tlpp-rest.th"

namespace custom.portaldorepresentante.orcamentos

@Post("portal-do-representante/orcamentos/")
user function getOrcamentos()

    local jResponse     := JsonObject():New()       as json
    local jPath         := JsonObject():New()       as json
    local jBody         := JsonObject():new()       as json
    local cBody         := oRest:getBodyRequest()   as character
    local cVendedor     := ""                       as character
    local cPagina       := "1"                      as character
    local cFiltro       := ""                       as character
    local cQuery        := ""                       as character
    local cAlias        := ""                       as character
    local jRegistro                                 as json

    custom.portaldorepresentante.setenv.u_McSetEnv()

    jPath := oRest:getQueryRequest() // Parametros passados via query string

    cBody := oRest:getBodyRequest()
    jBody:fromJson(cBody)
    
    if jPath != Nil .and. !empty(jPath:getJsonObject('sellerId'))

        cVendedor := jPath:getJsonObject('sellerId')
        cPagina := jPath:getJsonObject('page')
        cFiltro := jBody:getJsonObject('filtro')

        cQuery := getQueryBrowse(cPagina,cVendedor,cFiltro)

        cAlias := getNextAlias()

        MPSysOpenQuery(cQuery,cAlias)

        dbSelectArea(cAlias)
        (cAlias)->(dbGoTop())

        jResponse['objects'] = {}

        while !(cAlias)->(eof())

            jRegistro := JsonObject():New()

            jRegistro['filial']         := (cAlias)->CJ_FILIAL
            jRegistro['orcamento']      := (cAlias)->CJ_NUM
            jRegistro['dataEmissao']    := (cAlias)->CJ_EMISSAO
            jRegistro['cliente']        := (cAlias)->CJ_CLIENTE
            jRegistro['nomeCliente']    := posicione("SA1",1,xFilial("SA1") + (cAlias)->CJ_CLIENTE + (cAlias)->CJ_LOJA,"A1_NOME")
            jRegistro['situacao']       := iif( sToD((cAlias)->CJ_VALIDA) < date() .And. (cAlias)->CJ_YPRSITU $ "CP;PP", "EX", (cAlias)->CJ_YPRSITU )
            jRegistro['pedido']         := (cAlias)->C5_NUM
            jRegistro['situacaoPedido'] := iif( !empty((cAlias)->C5_NUM), iif( !empty((cAlias)->C5_NOTA) .And. !("X" $ (cAlias)->C5_NOTA), "F", "C" ), nil)
            jRegistro['dataVencimento'] := (cAlias)->CJ_VALIDA

            aAdd(jResponse['objects'],jRegistro)

            (cAlias)->(dbSkip())

        enddo

    else

        jResponse["message"] := "Erro na busca de dados"

    endif

    oRest:setKeyHeaderResponse("Content-Type","application/json")
    oRest:setResponse(jResponse:toJson())

    (cAlias)->(DbCloseArea())

return

@Get("portal-do-representante/orcamentos/dados")
user function getDadosOrcamento()

    local jResponse         := JsonObject():New()       as json
    local jPath             := JsonObject():New()       as json
    local aQuery            := {}                       as array
    local cAliasCabecalho   := ""                       as character
    local cAliasItens       := ""                       as character
    local cFilialCar        := ""                       as character
    local cOrcamento        := ""                       as character
    local jItem                                         as json

    custom.portaldorepresentante.setenv.u_McSetEnv()

    jPath := oRest:getQueryRequest() // Parametros passados via query string
    
    if jPath != Nil .and. !empty(jPath:getJsonObject('loadingLocation')) .and. !empty(jPath:getJsonObject('budget'))

        cFilialCar  := jPath:getJsonObject('loadingLocation')
        cOrcamento  := jPath:getJsonObject('budget')

        aQuery := getQueryDados(cFilialCar,cOrcamento)

        cAliasCabecalho := getNextAlias()
        cAliasItens     := getNextAlias()

        MPSysOpenQuery(aQuery[1],cAliasCabecalho)

        dbSelectArea(cAliasCabecalho)
        (cAliasCabecalho)->(dbGoTop())

        jResponse['filial']             := (cAliasCabecalho)->CJ_FILIAL
        jResponse['orcamento']          := (cAliasCabecalho)->CJ_NUM
        jResponse['situacao']           := iif( sToD((cAliasCabecalho)->CJ_VALIDA) < date() .And. (cAliasCabecalho)->CJ_YPRSITU $ "CP;PP", "EX", (cAliasCabecalho)->CJ_YPRSITU )
        jResponse['cliente']            := (cAliasCabecalho)->CJ_CLIENTE
        jResponse['loja']               := (cAliasCabecalho)->CJ_LOJA
        jResponse['nomeCliente']        := posicione("SA1",1,xFilial("SA1") + (cAliasCabecalho)->CJ_CLIENTE + (cAliasCabecalho)->CJ_LOJA,"A1_NOME")
        jResponse['dataEmissao']        := (cAliasCabecalho)->CJ_EMISSAO
        jResponse['condPag']            := (cAliasCabecalho)->CJ_CONDPAG
        jResponse['observacao']         := (cAliasCabecalho)->CJ_YOBS
        jResponse['tipoFrete']          := (cAliasCabecalho)->CJ_TPFRETE
        jResponse['condPagFrete']       := (cAliasCabecalho)->CJ_YCPAGFR
        jResponse['valorFrete']         := (cAliasCabecalho)->CJ_FRETE
        jResponse['tipoCarga']          := (cAliasCabecalho)->CJ_YTPCARG
        jResponse['valorDescarga']      := (cAliasCabecalho)->CJ_YVDESCA
        jResponse['cargaMaxima']        := (cAliasCabecalho)->CJ_YCARMAX
        jResponse['paletizacao10x1']    := (cAliasCabecalho)->CJ_YPP10X1
        jResponse['paletizacao30x1']    := (cAliasCabecalho)->CJ_YPP30X1
        jResponse['paletizacao25kg']    := (cAliasCabecalho)->CJ_YPP25KG
        jResponse['tipoVeiculo']        := (cAliasCabecalho)->CJ_YTPVEIC
        jResponse['responsavelFrete']   := (cAliasCabecalho)->CJ_YRESPFR
        jResponse['estadoDestino']      := (cAliasCabecalho)->CJ_YUFDEST
        jResponse['cidadeDestino']      := (cAliasCabecalho)->CJ_YMUNDES
        jResponse['itens']          := {}

        MPSysOpenQuery(aQuery[2],cAliasItens)

        dbSelectArea(cAliasItens)
        (cAliasItens)->(dbGoTop())
        
        while !(cAliasItens)->(eof())

            jItem := JsonObject():New()

            jItem['item']               := (cAliasItens)->CK_ITEM
            jItem['produto']            := (cAliasItens)->CK_PRODUTO
            jItem['descProduto']        := posicione("SB1",1,xFilial("SB1") + (cAliasItens)->CK_PRODUTO,"B1_DESC")
            jItem['quantidade']         := (cAliasItens)->CK_QTDVEN
            jItem['embalagem']          := (cAliasItens)->CK_UM
            jItem['precoFOB']           := (cAliasItens)->CK_YBASFOB
            jItem['valorUnitario']      := (cAliasItens)->CK_PRCVEN
            jItem['valorTotal']         := (cAliasItens)->CK_VALOR
            jItem['comissao']           := (cAliasItens)->CK_COMIS1
            jItem['tes']                := (cAliasItens)->CK_TES
            jItem['pesoNeto']           := posicione("SB1",1,xFilial("SB1")+(cAliasItens)->CK_PRODUTO,"B1_PESO")
            jItem['pesoBruto']          := posicione("SB1",1,xFilial("SB1")+(cAliasItens)->CK_PRODUTO,"B1_PESBRU")
            jItem['formatoEmbalagem']   := posicione("SB1",1,xFilial("SB1")+(cAliasItens)->CK_PRODUTO,"B1_YFORMAT")

            aAdd(jResponse['itens'],jItem)
            
            (cAliasItens)->(dbSkip())

        enddo
        
    else

        jResponse["message"]    := "Erro na busca de dados do orcamento"
        jResponse["fix"]        := "Para este endpoint e necessario informar os parametros budget (codigo do orcamento) e loadingLocation (codigo da filial)"

    endif

    oRest:setKeyHeaderResponse("Content-Type","application/json")
    oRest:setResponse(jResponse:toJson())

    (cAliasCabecalho)->(DbCloseArea())
    (cAliasItens)->(DbCloseArea())

return


@Post("portal-do-representante/orcamentos/incluir")
user function incluirOrcamento()

    local jResponse         := JsonObject():new()       as json
    local jBody             := JsonObject():new()       as json
    local cBody             := oRest:getBodyRequest()   as character
    local aCabecalho        := {}                       as array
    local aItens            := {}                       as array

    private lMsErroAuto     := .F.                      as logical

    cBody := oRest:getBodyRequest()
    
    if (!empty(cBody))

        jBody:fromJson(cBody)

        custom.portaldorepresentante.setenv.u_McSetEnv("10",jBody:getJsonObject('filial'))

        aCabecalho := montaArrayCabecalho(jBody)
        aItens     := montaArrayItens(jBody)
        
        if !empty(aCabecalho)

            begin transaction

                mata415(aCabecalho,aItens,3)

            end transaction

            if !lMsErroAuto

                jResponse["success"]    := .T.
                jResponse["message"]    := "Orçamento " + SCK->CK_NUM + " incluído com sucesso."
                jResponse["filial"]     := SCK->CK_FILIAL
                jResponse["orcamento"]  := SCK->CK_NUM

            else

                jResponse["success"]    := .F.
                jResponse["message"]    := "Erro na inclusão do orçamento."
                jResponse["fix"]        := "Erro na rotina automática: " + MemoRead(Alltrim(NomeAutoLog()))
            
            endif
        
        else

            jResponse["success"]    := .F.
            jResponse["message"]    := "Erro na inclusão do orçamento."
            jResponse["fix"]        := "Cabeçalho não informados no body da requisição."

        endif
        
    else

        jResponse["success"]    := .F.
        jResponse["message"]    := "Erro na inclusão do orçamento"
        jResponse["fix"]        := "Body vazio, necessário preencher com os dados do orçamento a ser atualizado."

    endif

    oRest:setKeyHeaderResponse("Content-Type","application/json")
    oRest:setResponse(jResponse:toJson())

return


@Put("portal-do-representante/orcamentos/alterar")
user function alterarOrcamento()

    local jResponse         := JsonObject():new()       as json
    local jBody             := JsonObject():new()       as json
    local cBody             := oRest:getBodyRequest()   As character
    local aCabecalho        := {}                       as array
    local aItens            := {}                       as array

    private lMsErroAuto     := .F.                      as logical

    cBody := oRest:getBodyRequest()
    
    if (!empty(cBody))

        jBody:fromJson(cBody)

        custom.portaldorepresentante.setenv.u_McSetEnv("10",jBody:getJsonObject('filial'))

        aCabecalho := montaArrayCabecalho(jBody)
        aItens     := montaArrayItens(jBody)

        if !empty(aCabecalho)

            begin transaction

                mata415(aCabecalho,aItens,4)

            end transaction

            if !lMsErroAuto

                jResponse["success"]    := .T.
                jResponse["message"]    := "Orçamento " + SCK->CK_NUM + " atualizado com sucesso."
                jResponse["filial"]     := SCK->CK_FILIAL
                jResponse["orcamento"]  := SCK->CK_NUM

            else

                jResponse["success"]    := .F.
                jResponse["message"]    := "Erro na alteração do orçamento."
                jResponse["fix"]        := "Erro na rotina automática: " + MemoRead(Alltrim(NomeAutoLog()))
            
            endif
        
        else

            jResponse["success"]    := .F.
            jResponse["message"]    := "Erro na alteração do orçamento."
            jResponse["fix"]        := "Cabeçalho não informados no body da requisição."

        endif
        
    else

        jResponse["success"]    := .F.
        jResponse["message"]    := "Erro na alteração do orçamento"
        jResponse["fix"]        := "Body vazio, necessário preencher com os dados do orçamento a ser atualizado."

    endif

    oRest:setKeyHeaderResponse("Content-Type","application/json")
    oRest:setResponse(jResponse:toJson())

return


@Post("portal-do-representante/orcamentos/indicadores")
user function getIndicadores()

    local jResponse         := JsonObject():new()       as json
    local jItem             := JsonObject():new()       as json
    local jBody             := JsonObject():new()       as json
    local cBody             := oRest:getBodyRequest()   as character
    local cVendedor         := ""                       as character
    local aIndicadores      := {}                       as array
    local jIndicador        := JsonObject():new()       as json
    local nPos              := 0                        as numeric
    local cAlias            := ""                       as character
    local cQuery            := ""                       as character
    local cFiltro           := ""                       as character

    custom.portaldorepresentante.setenv.u_McSetEnv()

    cBody := oRest:getBodyRequest()
    
    jBody:fromJson(cBody)

    cVendedor := jBody:getJsonObject('vendedor')
    aIndicadores := jBody:getJsonObject('indicadores')

    jResponse['indicadores'] := {}
    jResponse['success'] := .T.

    for nPos := 1 to Len(aIndicadores)

        jIndicador := aIndicadores[nPos]

        cAlias := getNextAlias()
        cFiltro := jIndicador:getJsonObject('filtro')
        cQuery := getQueryIndicadores(cVendedor,cFiltro)

        MPSysOpenQuery(cQuery,cAlias)

        dbSelectArea(cAlias)
        (cAlias)->(dbGoTop())

        if !(cAlias)->(eof())

            jItem := JsonObject():new()

            jItem['success']    := .T.
            jItem['indicador']  := jIndicador:getJsonObject('ordem')
            jItem['descricao']  := jIndicador:getJsonObject('descricao')
            jItem['filtro']     := cFiltro
            jItem['quantidade'] := (cAlias)->TOTAL

            aAdd(jResponse['indicadores'],jItem)

        else

            jItem := JsonObject():new()

            jItem["success"]    := .F.
            jItem["message"]    := "Indicador não encontrado."
            jItem["fix"]        := "Verifique o filtro do indicador."

            aAdd(jResponse['indicadores'],jItem)

            jResponse['success'] := .F.

        endif

        (cAlias)->(DbCloseArea())

    next

    oRest:setKeyHeaderResponse("Content-Type","application/json")
    oRest:setResponse(jResponse:toJson())

return

@Put("portal-do-representante/orcamentos/cotacao/aprovar")
user function aprovarCotacao()

    local jResponse         := JsonObject():new()       as json
    local jBody             := JsonObject():new()       as json
    local cBody             := oRest:getBodyRequest()   as character
    local cFilialOrc        := ""                       as character
    local cOrcamento        := ""                       as character
    local cTamCampoOrc      := 6                        as numeric
    local aArea             := GetArea()                as array

    cBody := oRest:getBodyRequest()

    jBody:fromJson(cBody)

    cFilialOrc := jBody:getJsonObject('filial')
    cOrcamento := jBody:getJsonObject('orcamento')

    custom.portaldorepresentante.setenv.u_McSetEnv("10",cFilialOrc)

    cTamCampoOrc := tamSX3("CJ_NUM")[1]

    dbSelectArea("SCJ")
    SCJ->(dbSetOrder(1))
    SCJ->(dbGoTop())

    If SCJ->(dbSeek(cFilialOrc+PadR(cOrcamento,cTamCampoOrc," "))) .And. SCJ->CJ_YPRSITU == "CP"

        If recLock("SCJ",.F.)

            SCJ->CJ_YPRSITU := "PE"
            SCJ->CJ_YDTALTE := date()
            SCJ->(msUnlock())

            jResponse["success"]    := .T.
            jResponse["message"]    := "Cotação " + cOrcamento + " aprovada com sucesso."

        Else

            jResponse["success"]    := .F.
            jResponse["message"]    := "Erro ao aprovar a cotação."
            jResponse["fix"]        := "Não foi possível aprovar a cotação, tente novamente mais tarde."

        EndIf

    else

        jResponse["success"]    := .F.
        jResponse["message"]    := "Cotação não encontrada."
        jResponse["fix"]        := "Verifique os dados informados."

    endif
    
    oRest:setKeyHeaderResponse("Content-Type","application/json")
    oRest:setResponse(jResponse:toJson())

    RestArea(aArea)

return


@Put("portal-do-representante/orcamentos/cotacao/rejeitar")
user function rejeitarCotacao()

    local jResponse         := JsonObject():new()       as json
    local jBody             := JsonObject():new()       as json
    local cBody             := oRest:getBodyRequest()   as character
    local cFilialOrc        := ""                       as character
    local cOrcamento        := ""                       as character
    local cTamCampoOrc      := 6                        as numeric
    local aArea             := GetArea()                as array

    cBody := oRest:getBodyRequest()

    jBody:fromJson(cBody)

    cFilialOrc := jBody:getJsonObject('filial')
    cOrcamento := jBody:getJsonObject('orcamento')

    custom.portaldorepresentante.setenv.u_McSetEnv("10",cFilialOrc)

    cTamCampoOrc := tamSX3("CJ_NUM")[1]

    dbSelectArea("SCJ")
    SCJ->(dbSetOrder(1))
    SCJ->(dbGoTop())

    If SCJ->(dbSeek(cFilialOrc+PadR(cOrcamento,cTamCampoOrc," "))) .And. SCJ->CJ_YPRSITU == "CP"

        If recLock("SCJ",.F.)

            SCJ->CJ_YPRSITU := "CR"
            SCJ->CJ_YDTALTE := date()
            SCJ->(msUnlock())

            jResponse["success"]    := .T.
            jResponse["message"]    := "Cotação " + cOrcamento + " rejeitada com sucesso."

        Else

            jResponse["success"]    := .F.
            jResponse["message"]    := "Erro ao rejeitar a cotação."
            jResponse["fix"]        := "Não foi possível rejeitar a cotação, tente novamente mais tarde."

        EndIf

    else

        jResponse["success"]    := .F.
        jResponse["message"]    := "Cotação não encontrada."
        jResponse["fix"]        := "Verifique os dados informados."

    endif
    
    oRest:setKeyHeaderResponse("Content-Type","application/json")
    oRest:setResponse(jResponse:toJson())

    RestArea(aArea)

return

@Put("portal-do-representante/orcamentos/pre-pedido/aprovar")
user function aprovarPrePedido()

    local jResponse         := JsonObject():new()       as json
    local jBody             := JsonObject():new()       as json
    local cBody             := oRest:getBodyRequest()   as character
    local cFilialOrc        := ""                       as character
    local cOrcamento        := ""                       as character
    local cTamCampoOrc      := 6                        as numeric
    local aArea             := GetArea()                as array

    cBody := oRest:getBodyRequest()

    jBody:fromJson(cBody)

    cFilialOrc := jBody:getJsonObject('filial')
    cOrcamento := jBody:getJsonObject('orcamento')

    custom.portaldorepresentante.setenv.u_McSetEnv("10",cFilialOrc)

    cTamCampoOrc := tamSX3("CJ_NUM")[1]

    dbSelectArea("SCJ")
    SCJ->(dbSetOrder(1))
    SCJ->(dbGoTop())

    If SCJ->(dbSeek(cFilialOrc+PadR(cOrcamento,cTamCampoOrc," "))) .And. SCJ->CJ_YPRSITU == "PP"

        If recLock("SCJ",.F.)

            SCJ->CJ_YPRSITU := "PE"
            SCJ->CJ_YDTALTE := date()
            SCJ->(msUnlock())

            jResponse["success"]    := .T.
            jResponse["message"]    := "Pré-pedido " + cOrcamento + " enviado para aprovação com sucesso."

        Else

            jResponse["success"]    := .F.
            jResponse["message"]    := "Erro ao enviar pré-pedido para aprovação."
            jResponse["fix"]        := "Não foi possível enviar o pré-pedido, tente novamente mais tarde."

        EndIf

    else

        jResponse["success"]    := .F.
        jResponse["message"]    := "Pré-pedido não encontrado."
        jResponse["fix"]        := "Verifique os dados informados."

    endif
    
    oRest:setKeyHeaderResponse("Content-Type","application/json")
    oRest:setResponse(jResponse:toJson())

    RestArea(aArea)

return


static function getQueryBrowse(cPagina, cVendedor, cFiltro)

    local cQuery := ""
    //local cTamPagina := "20"

    cQuery += " SELECT *
    cQuery += " FROM " + retSQLName("SCJ") + " SCJ
    cQuery += " LEFT JOIN " + retSQLName("SC5") + " SC5 ON C5_FILIAL = CJ_FILIAL AND C5_YNUMORC = CJ_NUM AND SC5.D_E_L_E_T_ = ' '
    cQuery += " WHERE SCJ.D_E_L_E_T_ = ' ' AND CJ_YVEND = '"+cVendedor+"'
    if !empty(cFiltro)
        cQuery += " AND " + cFiltro
    endif
    cQuery += " ORDER BY CJ_YDTALTE,SCJ.R_E_C_N_O_ DESC
    //cQuery += " OFFSET ("+cPagina+" - 1) * "+cTamPagina+" ROWS
    //cQuery += " FETCH NEXT "+cTamPagina+" ROWS ONLY;

return cQuery


static function getQueryIndicadores(cVendedor,cFiltro)

    local cQuery := ""

    cQuery += " SELECT COUNT(*) AS TOTAL
    cQuery += " FROM " + retSQLName("SCJ") + " SCJ
    cQuery += " LEFT JOIN " + retSQLName("SC5") + " SC5 ON C5_FILIAL = CJ_FILIAL AND C5_YNUMORC = CJ_NUM AND SC5.D_E_L_E_T_ = ' '
    cQuery += " WHERE SCJ.D_E_L_E_T_ = ' ' AND CJ_YVEND = '"+cVendedor+"'
    if !empty(cFiltro)
        cQuery += " AND " + cFiltro
    endif

return cQuery


static function getQueryDados(cFilialCar, cOrcamento)

    local cQueryCabecalho   := ""   as character
    local cQueryItens       := ""   as character
    
    cQueryCabecalho += " SELECT TOP 1 *
    cQueryCabecalho += " FROM " + retSQLName("SCJ")
    cQueryCabecalho += " WHERE D_E_L_E_T_ = ' ' AND CJ_FILIAL = '"+cFilialCar+"' AND CJ_NUM = '"+cOrcamento+"'

    cQueryItens     += " SELECT *
    cQueryItens     += " FROM " + retSQLName("SCK")
    cQueryItens     += " WHERE D_E_L_E_T_ = ' ' AND CK_FILIAL = '"+cFilialCar+"' AND CK_NUM = '"+cOrcamento+"'

return {cQueryCabecalho,cQueryItens}


static function montaArrayCabecalho(jBody as json) as array

    local aCabecalho        := {} as array
    local nDiasVencimento   := GetNewPar("MS_DVENCOR",7)

    iif( !empty(jBody:getJsonObject('filial')),             aAdd( aCabecalho, { "CJ_FILIAL",    jBody:getJsonObject('filial'),              nil } ) , nil )
    iif( !empty(jBody:getJsonObject('orcamento')),          aAdd( aCabecalho, { "CJ_NUM",       jBody:getJsonObject('orcamento'),           nil } ) , nil )
    iif( !empty(jBody:getJsonObject('cliente')),            aAdd( aCabecalho, { "CJ_CLIENTE",   jBody:getJsonObject('cliente'),             nil } ) , nil )
    iif( !empty(jBody:getJsonObject('lojaCliente')),        aAdd( aCabecalho, { "CJ_LOJA",      jBody:getJsonObject('lojaCliente'),         nil } ) , nil )
    iif( !empty(jBody:getJsonObject('condPag')),            aAdd( aCabecalho, { "CJ_CONDPAG",   jBody:getJsonObject('condPag'),             nil } ) , nil )
    iif( !empty(jBody:getJsonObject('vendedor')),           aAdd( aCabecalho, { "CJ_YVEND",     jBody:getJsonObject('vendedor'),            nil } ) , nil )
    iif( !empty(jBody:getJsonObject('situacao')),           aAdd( aCabecalho, { "CJ_YPRSITU",   jBody:getJsonObject('situacao'),            nil } ) , nil )
    iif( !empty(jBody:getJsonObject('observacao')),         aAdd( aCabecalho, { "CJ_YOBS",      jBody:getJsonObject('observacao'),          nil } ) , nil )
    iif( !empty(jBody:getJsonObject('condPagFrete')),       aAdd( aCabecalho, { "CJ_YCPAGFR",   jBody:getJsonObject('condPagFrete'),        nil } ) , nil )
    iif( !empty(jBody:getJsonObject('valorFrete')),         aAdd( aCabecalho, { "CJ_FRETE",     jBody:getJsonObject('valorFrete'),          nil } ) , nil )
    iif( !empty(jBody:getJsonObject('tipoCarga')),          aAdd( aCabecalho, { "CJ_YTPCARG",   jBody:getJsonObject('tipoCarga'),           nil } ) , nil )
    iif( !empty(jBody:getJsonObject('valorDescarga')),      aAdd( aCabecalho, { "CJ_YVDESCA",   jBody:getJsonObject('valorDescarga'),       nil } ) , nil )
    iif( !empty(jBody:getJsonObject('tipoFrete')),          aAdd( aCabecalho, { "CJ_TPFRETE",   jBody:getJsonObject('tipoFrete'),           nil } ) , nil )
    iif( !empty(jBody:getJsonObject('cargaMaxima')),        aAdd( aCabecalho, { "CJ_YCARMAX",   jBody:getJsonObject('cargaMaxima'),         nil } ) , nil )
    iif( !empty(jBody:getJsonObject('paletizacao10x1')),    aAdd( aCabecalho, { "CJ_YPP10X1",   jBody:getJsonObject('paletizacao10x1'),     nil } ) , nil )
    iif( !empty(jBody:getJsonObject('paletizacao30x1')),    aAdd( aCabecalho, { "CJ_YPP30X1",   jBody:getJsonObject('paletizacao30x1'),     nil } ) , nil )
    iif( !empty(jBody:getJsonObject('paletizacao25kg')),    aAdd( aCabecalho, { "CJ_YPP25KG",   jBody:getJsonObject('paletizacao25kg'),     nil } ) , nil )
    iif( !empty(jBody:getJsonObject('tipoVeiculo')),        aAdd( aCabecalho, { "CJ_YTPVEIC",   jBody:getJsonObject('tipoVeiculo'),         nil } ) , nil )
    iif( !empty(jBody:getJsonObject('estadoDestino')),      aAdd( aCabecalho, { "CJ_YUFDEST",   jBody:getJsonObject('estadoDestino'),       nil } ) , nil )
    iif( !empty(jBody:getJsonObject('cidadeDestino')),      aAdd( aCabecalho, { "CJ_YMUNDES",   jBody:getJsonObject('cidadeDestino'),       nil } ) , nil )
    iif( !empty(jBody:getJsonObject('custoSobrepeso')),     aAdd( aCabecalho, { "CJ_YSBPORT",   jBody:getJsonObject('custoSobrepeso'),      nil } ) , nil )
    iif( !empty(jBody:getJsonObject('responsavelFrete')),   aAdd( aCabecalho, { "CJ_YRESPFR",   iif( jBody:getJsonObject('responsavelFrete') == "1", .T., .F. ),    nil } ) , nil )
    
    aAdd(aCabecalho, { "CJ_YDTALTE",    date(),                 nil })
    aAdd(aCabecalho, { "CJ_VALIDA",     date()+nDiasVencimento, nil })

return aCabecalho


static function montaArrayItens(jBody as json) as array

    local aItens        := {}                  as array
    local jItem         := JsonObject():new()  as json
    local aLinha        := {}                  as array
    local nPos          := 0                   as numeric
    local aItensJson    := {}              as array

    iif( !empty(jBody:getJsonObject('itens')), aItensJson := jBody:getJsonObject('itens'), nil)

    for nPos := 1 To len(aItensJson)

        jItem := aItensJson[nPos]

        aLinha := {}

        iif( !empty(jBody:getJsonObject('filial')),         aAdd( aLinha, { "CK_FILIAL",    jBody:getJsonObject('filial'),          nil } ) , nil )
        iif( !empty(jItem:getJsonObject('item')),           aAdd( aLinha, { "CK_ITEM",      jItem:getJsonObject('item'),            nil } ) , nil )
        iif( !empty(jItem:getJsonObject('produto')),        aAdd( aLinha, { "CK_PRODUTO",   jItem:getJsonObject('produto'),         nil } ) , nil )
        iif( !empty(jItem:getJsonObject('quantidade')),     aAdd( aLinha, { "CK_QTDVEN",    jItem:getJsonObject('quantidade'),      nil } ) , nil )
        iif( !empty(jItem:getJsonObject('precoFOB')),       aAdd( aLinha, { "CK_YBASFOB",   jItem:getJsonObject('precoFOB'),        nil } ) , nil )
        iif( !empty(jItem:getJsonObject('precoUnitario')),  aAdd( aLinha, { "CK_PRCVEN",    jItem:getJsonObject('precoUnitario'),   nil } ) , nil )
        iif( !empty(jItem:getJsonObject('comissao')),       aAdd( aLinha, { "CK_COMIS1",    jItem:getJsonObject('comissao'),        nil } ) , nil )
        iif( !empty(jItem:getJsonObject('tes')),            aAdd( aLinha, { "CK_TES",       jItem:getJsonObject('tes'),             nil } ) , aAdd( aLinha, { "CK_TES",       AllTrim(GetMV("MS_PRTESPD")),             nil } ) )
        iif( !empty(jBody:getJsonObject('cliente')),        aAdd( aLinha, { "CK_CLIENTE",   jBody:getJsonObject('cliente'),         nil } ) , nil )
        iif( !empty(jBody:getJsonObject('loja')),           aAdd( aLinha, { "CK_LOJA",      jBody:getJsonObject('loja'),            nil } ) , nil )

        aAdd(aItens,aLinha)

    next


return aItens
